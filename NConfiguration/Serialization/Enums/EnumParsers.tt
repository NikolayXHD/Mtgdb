<#@ template debug="false" hostspecific="false" language="C#"
#><#@ output extension=".cs"
 #><#string[] types = new []{
	"Byte",
	"SByte",
	"Int16",
	"Int32",
	"Int64",
	"UInt16",
	"UInt32",
	"UInt64"
};#>using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;

namespace NConfiguration.Serialization.Enums
{
<#foreach(var type in types){#>
	internal sealed class <#= type#>EnumParser<T>: IEnumParser<T> where T: struct
	{
		private readonly Dictionary<string, T> _nameMap;
		private readonly Dictionary<<#= type#>, T> _numMap;

		public <#= type#>EnumParser()
		{
			int count = Enum.GetValues(typeof(T)).Length;

			_nameMap = new Dictionary<string, T>(count, NameComparer.Instance);
			_numMap = new Dictionary<<#= type#>, T>(count);

			foreach (T item in Enum.GetValues(typeof(T)).Cast<T>())
			{
				T exist;
				string strkey = item.ToString();
				if (!_nameMap.TryGetValue(strkey, out exist))
					_nameMap.Add(strkey, item);

				<#= type#> numkey = (<#= type#>)(ValueType)item;
				if (!_numMap.TryGetValue(numkey, out exist))
					_numMap.Add(numkey, item);
			}
		}

		public T Parse(string text)
		{
			T exist;
			if (_nameMap.TryGetValue(text, out exist))
				return exist;

			<#= type#> num;
			if(<#= type#>.TryParse(text, NumberStyles.Integer, CultureInfo.InvariantCulture.NumberFormat, out num) ||
				<#= type#>.TryParse(text.Replace("0x", ""), NumberStyles.HexNumber, CultureInfo.InvariantCulture.NumberFormat, out num))
			{
				if (_numMap.TryGetValue(num, out exist))
					return exist;
			}

			throw new FormatException(string.Format("enum {0} not contain value '{1}'", typeof(T).FullName, text));
		}
	}

	internal class <#= type#>FlagEnumParser<T>: IEnumParser<T> where T: struct
	{
		private readonly Dictionary<string, T> _nameMap;

		public <#= type#>FlagEnumParser()
		{
			int count = Enum.GetValues(typeof(T)).Length;

			_nameMap = new Dictionary<string, T>(count, NameComparer.Instance);

			foreach (T item in Enum.GetValues(typeof(T)).Cast<T>())
			{
				T exist;
				string strkey = item.ToString();
				if (!_nameMap.TryGetValue(strkey, out exist))
					_nameMap.Add(strkey, item);
			}
		}
		
		private T ParseOne(string text)
		{
			T exist;
			if (_nameMap.TryGetValue(text, out exist))
				return exist;

			<#= type#> num;
			if(<#= type#>.TryParse(text, NumberStyles.Integer, CultureInfo.InvariantCulture.NumberFormat, out num) ||
				<#= type#>.TryParse(text.Replace("0x", ""), NumberStyles.HexNumber, CultureInfo.InvariantCulture.NumberFormat, out num))
			{
				return (T)(ValueType)num;
			}

			throw new FormatException(string.Format("enum {0} not contain value '{1}'", typeof(T).FullName, text));
		}

		private <#= type#> ParseToNumber(string text)
		{
			T exist;
			if (_nameMap.TryGetValue(text, out exist))
				return (<#= type#>)(ValueType)exist;

			<#= type#> num;
			if(<#= type#>.TryParse(text, NumberStyles.Integer, CultureInfo.InvariantCulture.NumberFormat, out num) ||
				<#= type#>.TryParse(text.Replace("0x", ""), NumberStyles.HexNumber, CultureInfo.InvariantCulture.NumberFormat, out num))
			{
				return num;
			}

			throw new FormatException(string.Format("enum {0} not contain value '{1}'", typeof(T).FullName, text));
		}

		public T Parse(string text)
		{
			string[] items = text.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

			if (items.Length == 0)
				return default(T);

			if (items.Length == 1)
				return ParseOne(items[0]);

			<#= type#> result = 0;

			foreach (var item in items)
				result |= ParseToNumber(item);

			return (T)(ValueType)result;
		}
	}

<#}#>
}
